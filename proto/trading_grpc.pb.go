// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: proto/trading.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TradingClient is the client API for Trading service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradingClient interface {
	ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (Trading_ListItemsClient, error)
	Buy(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*BuyResponse, error)
}

type tradingClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingClient(cc grpc.ClientConnInterface) TradingClient {
	return &tradingClient{cc}
}

func (c *tradingClient) ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (Trading_ListItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Trading_ServiceDesc.Streams[0], "/Trading/ListItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingListItemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Trading_ListItemsClient interface {
	Recv() (*Goods, error)
	grpc.ClientStream
}

type tradingListItemsClient struct {
	grpc.ClientStream
}

func (x *tradingListItemsClient) Recv() (*Goods, error) {
	m := new(Goods)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingClient) Buy(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*BuyResponse, error) {
	out := new(BuyResponse)
	err := c.cc.Invoke(ctx, "/Trading/Buy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingServer is the server API for Trading service.
// All implementations must embed UnimplementedTradingServer
// for forward compatibility
type TradingServer interface {
	ListItems(*ListItemsRequest, Trading_ListItemsServer) error
	Buy(context.Context, *BuyRequest) (*BuyResponse, error)
	mustEmbedUnimplementedTradingServer()
}

// UnimplementedTradingServer must be embedded to have forward compatible implementations.
type UnimplementedTradingServer struct {
}

func (UnimplementedTradingServer) ListItems(*ListItemsRequest, Trading_ListItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListItems not implemented")
}
func (UnimplementedTradingServer) Buy(context.Context, *BuyRequest) (*BuyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Buy not implemented")
}
func (UnimplementedTradingServer) mustEmbedUnimplementedTradingServer() {}

// UnsafeTradingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradingServer will
// result in compilation errors.
type UnsafeTradingServer interface {
	mustEmbedUnimplementedTradingServer()
}

func RegisterTradingServer(s grpc.ServiceRegistrar, srv TradingServer) {
	s.RegisterService(&Trading_ServiceDesc, srv)
}

func _Trading_ListItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListItemsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingServer).ListItems(m, &tradingListItemsServer{stream})
}

type Trading_ListItemsServer interface {
	Send(*Goods) error
	grpc.ServerStream
}

type tradingListItemsServer struct {
	grpc.ServerStream
}

func (x *tradingListItemsServer) Send(m *Goods) error {
	return x.ServerStream.SendMsg(m)
}

func _Trading_Buy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).Buy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Trading/Buy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).Buy(ctx, req.(*BuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Trading_ServiceDesc is the grpc.ServiceDesc for Trading service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Trading_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Trading",
	HandlerType: (*TradingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Buy",
			Handler:    _Trading_Buy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListItems",
			Handler:       _Trading_ListItems_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/trading.proto",
}
